worker_processes  2;

events {
  worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;
  keepalive_timeout  65;

  # This map allows us to refer to $static_content_root in our location blocks,
  # and get an appropriate root back based on the "app" portion of the hostname
  # we connect to. The named matches ("app" and "subdir") below will also set
  # variables that are available to us in the path we return. A reasonable
  # convention (used by Rails, for instance) is to have a /public directory
  # inside the project's root, so this is what we are defaulting to here.
  map $host $static_content_root {
    hostnames; # Allows us to use wildcard matching, e.g., *.local.devel
    # If you want to put some kind of static index.html in this location, it'll
    # display if you access the root of a project that doesn't have a match.
    default /Users/kaji/GitHub/cloudfactory;
    # For typical standalone apps living in your project directory
    # *.myapp.local.devel -> <MY_PROJECT_ROOT>/myapp/public
    ~^([^\.]+)*\.cloudfactory\.devel$
      <MY_PROJECT_ROOT>/$app/public;
    # For apps that are part of a group of some kind (e.g., SOA apps), you can
    # place all apps inside of a subdirectory, and use the subdirectory name in
    # place of "local".
    # *.sub.myapp.devel -> <MY_PROJECT_ROOT>/myapp/sub/public
    ~^([^\.]+\.)*(?<app>[^\.]+)\.(?<subdir>[^\.]+)\.devel$
      <MY_PROJECT_ROOT>/$subdir/$app/public;
  }
  # In order to proxy to the proper app, we include a file with maps for devel
  # and staging ports for specific apps. They default to 3000 and 4000,
  # respectively, so you can always use apps that don't need to run together
  # by just starting them up on that port. That keeps the need to generate/edit
  # the proxy_ports.conf minimal.
  include proxy_ports.conf;

  # Handle HTTP requests to *.devel
  server {
    listen       127.0.0.1:8080;
    server_name  ~^([^\.]+\.)*(?<app>[^\.]+)\.[^\.]+.devel$;

    location / {
      root   $static_content_root; # Using the map we defined earlier
      try_files $uri $uri/index.html @devel;
    }

    location @devel {
      proxy_set_header  X-Real-IP         $remote_addr;
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  Host              $http_host;
      proxy_redirect    off;
      proxy_pass        http://192.168.59.103:$devel_proxy_port;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }
  }

  # Handle HTTPS requests to *.devel
  server {
    listen       127.0.0.1:8443;
    server_name  *.devel;

    ssl on;
    ssl_certificate     /usr/local/etc/nginx/ssl/cloudfactory.devel.pem;
    ssl_certificate_key /usr/local/etc/nginx/ssl/cloudfactory.devel.key;
    ssl_session_timeout 5m;

    location / {
      root   $static_content_root; # Using the map we defined earlier
      try_files $uri $uri/index.html @devel;
    }

    # Note that this block is slightly different than the non-HTTPS one. If we
    # don't set X-Forwarded-Proto, then if our app tries to force SSL, it will
    # end up in a redirect loop.
    location @devel {
      proxy_set_header  X-Real-IP         $remote_addr;
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_set_header  Host              $http_host;
      proxy_redirect    off;
      proxy_pass        http://192.168.59.103:$devel_proxy_port;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }
  }
}
